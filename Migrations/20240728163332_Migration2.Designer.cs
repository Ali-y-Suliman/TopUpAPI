// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TopUpAPI.Data;

#nullable disable

namespace TopUpAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240728163332_Migration2")]
    partial class Migration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TopUpAPI.Models.TopUpBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TopUpBeneficiaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nickname = "Beneficiary1"
                        },
                        new
                        {
                            Id = 2,
                            Nickname = "Beneficiary2"
                        },
                        new
                        {
                            Id = 3,
                            Nickname = "Beneficiary3"
                        },
                        new
                        {
                            Id = 4,
                            Nickname = "Beneficiary4"
                        });
                });

            modelBuilder.Entity("TopUpAPI.Models.TopUpOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("TopUpOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 5.00m
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10.00m
                        },
                        new
                        {
                            Id = 3,
                            Amount = 20.00m
                        },
                        new
                        {
                            Id = 4,
                            Amount = 30.00m
                        },
                        new
                        {
                            Id = 5,
                            Amount = 50.00m
                        },
                        new
                        {
                            Id = 6,
                            Amount = 75.00m
                        },
                        new
                        {
                            Id = 7,
                            Amount = 100.00m
                        });
                });

            modelBuilder.Entity("TopUpAPI.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("TopUpAmount")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("TopUpFeeAmount")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("TopUpTotalAmount")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsersTopUpBeneficiariesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersTopUpBeneficiariesId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TopUpAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user1@example.com",
                            IsVerified = true,
                            Name = "User1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@example.com",
                            IsVerified = false,
                            Name = "User2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "user3@example.com",
                            IsVerified = true,
                            Name = "User3"
                        },
                        new
                        {
                            Id = 4,
                            Email = "user4@example.com",
                            IsVerified = false,
                            Name = "User4"
                        });
                });

            modelBuilder.Entity("TopUpAPI.Models.UsersTopUpBeneficiaries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopUpBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopUpBeneficiaryId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersTopUpBeneficiaries");
                });

            modelBuilder.Entity("TopUpAPI.Models.Transactions", b =>
                {
                    b.HasOne("TopUpAPI.Models.UsersTopUpBeneficiaries", "UsersTopUpBeneficiaries")
                        .WithMany("Transactions")
                        .HasForeignKey("UsersTopUpBeneficiariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsersTopUpBeneficiaries");
                });

            modelBuilder.Entity("TopUpAPI.Models.UsersTopUpBeneficiaries", b =>
                {
                    b.HasOne("TopUpAPI.Models.TopUpBeneficiary", "TopUpBeneficiary")
                        .WithMany("UsersTopUpBeneficiaries")
                        .HasForeignKey("TopUpBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TopUpAPI.Models.User", "User")
                        .WithMany("UsersTopUpBeneficiaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopUpBeneficiary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TopUpAPI.Models.TopUpBeneficiary", b =>
                {
                    b.Navigation("UsersTopUpBeneficiaries");
                });

            modelBuilder.Entity("TopUpAPI.Models.User", b =>
                {
                    b.Navigation("UsersTopUpBeneficiaries");
                });

            modelBuilder.Entity("TopUpAPI.Models.UsersTopUpBeneficiaries", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
